[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "21cmSense"
description = "Compute sensitivies of radio interferometers to the cosmic 21cm signal."
readme = "README.rst"
authors = [
  {name="Jonathan Pober", email="jonathon_pober@brown.edu"},
  {name="Steven Murray", email="murray.steveng@gmail.com"},
  {name="Matt Kolopanis", email="matthew.kolopanis@gmail.com"},
]
requires-python = ">=3.9"
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dynamic = ['version']


# Add here dependencies of your project (semicolon/line-separated), e.g.
dependencies = [
  "numpy<2.0",  # Restriction can be lifted once pyuvdata is good with numpy 2
  "scipy",
  "future",
  "click",
  "tqdm",
  "pyyaml",
  "astropy>=5",
  "methodtools",
  "pyuvdata",
  "cached_property",
  "rich",
  "attrs",
  "hickleable>=0.1.1",
]

[project.optional-dependencies]
docs = [
  "sphinx>=1.3",
  "sphinx-rtd-theme",
  "numpydoc",
  "nbsphinx",
  "ipython",
]
test = [
  "pre-commit",
  "pytest",
  "matplotlib",
  "pytest-cov",
  "pytest-xdist",
]
dev = [
  "21cmSense[docs,test]",
  "pre-commit",
  "commitizen",
  "ruff"
]

[project.scripts]
sense = "py21cmsense.cli:main"


[tool.setuptools_scm]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
extend-select = [
  "UP",   # pyupgrade
  "E",    # pycodestyle
  "W",    # pycodestyle warning
  "C90",  # mccabe complexity
  "I",    # isort
  "N",    # pep8-naming
  "D",    # docstyle
  "B",    # bugbear
  "A",    # builtins
  "C4",   # comprehensions
  "DTZ",  # datetime
  "FA",   # future annotations
  "PIE",  # flake8-pie
  "T",    # print statements
  "PT",   # pytest-style
  "Q",    # quotes
  "SIM",  # simplify
  # "PTH",  # use Pathlib
  "ERA",  # kill commented code
  "NPY",  # numpy-specific rules
  "PERF", # performance
  "RUF",  # ruff-specific rules
]
ignore = [
    "DTZ007",   # use %z in strptime
    "A003",     # class attribute shadows python builtin
    "B008",     # function call in argument defaults
    "N802",     # TODO: remove this (function name should be lower-case)
    "B019",     # no using lru_cache on methods
    "G004",     # logging uses f-string
    "D107",     # no docstring in __init__
]
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D103",  # ignore missing docstring in tests
    "DTZ",   # ignore datetime in tests
    "T",     # print statements
]
"docs/conf.py" = [
    "A",  # conf.py can shadow builtins
    "ERA",
]

[tool.ruff.lint.pydocstyle]
convention = 'numpy'
property-decorators = ['property', 'functools.cached_property']

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.pytest.ini_options]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts = "--cov py21cmsense --cov-report term-missing --verbose"
norecursedirs = [
  "dist",
  "build",
  ".tox",
]
testpaths = "tests"

[tool.black]
line-length = 88
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
